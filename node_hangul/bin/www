#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('node_db2:server');
const http = require('http');
const path = require('path');
const sockApp = require('../socket/main');
const master = require('../engine/masterEngine');
const workerModule = path.join(__dirname, '../', 'engine/searchEngine.js');
const cacheModule = path.join(__dirname, '../', 'engine/cacheEngine.js');
const MAX_LOG_ROWS_BROADCASTING = global.MAX_LOG_ROWS_BROADCASTING;
const CRON_FOR_SCHEDULED_INDEXING = global.CRON_FOR_SCHEDULED_INDEXING;


/**
 * Get port from environment and store in Express.
 */
async function main(){

  var port = normalizePort(global.PORT);
  app.set('port', port);

  /**
   * Create HTTP server.
   */

  var server = http.createServer(app);

  /*
  * Create Socket.io Server.
  */

  const io = require('socket.io')(server);

  // In the router, you can broadcast message using req.app.get('io').sockets.emit()
  // In the router, you can emit message to specific client using req.app.get('io').sockets.connected[socketid].emit()
  app.set('io',io); 
  app.set('sockets', io.sockets);
  const socketServer = sockApp.createServer(io);
  
  const masterEngine = master.initMaster({
    maxWorkers : global.NUMBER_OF_WORKER,
    searchModule : workerModule,
    maxCache : global.NUMBER_OF_CACHE,
    cacheModule : cacheModule,
    notification: {
      enabled : true,
      bcastIO : io
    },
    logOptions: {
      maxLogs : MAX_LOG_ROWS_BROADCASTING
    }
  })
  app.set('masterEngine', masterEngine);

  if(global.SCHEDULE_ENABLED){
    const scheduleEngine = require('../engine/schedulerEngine')(masterEngine, app.get('musicdb'));
    scheduleEngine.register(CRON_FOR_SCHEDULED_INDEXING, global.SCHEDULE_NAME.INCREMENTAL);
    scheduleEngine.start(global.SCHEDULE_NAME.INCREMENTAL); 
    app.set('scheduleEngine', scheduleEngine);
  }


  // make monitor instance for worker to get/set monitor status and broadcast status
  socketServer.registerMaster(masterEngine);
  socketServer.startBroadcastLoop(global.MONITOR_BROADCAST_INTERVAL);

  /**
   * Listen on provided port, on all network interfaces.
   */

  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

  // set max request timeout
  // server.setTimeout(global.EXPRESS_REQ_TIMEOUT);
  /**
   * Normalize a port into a number, string, or false.
   */

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}

main();

